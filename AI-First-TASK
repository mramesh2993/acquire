-copy folder 
Archival_Path="${Archival_Path}"
Source_Path="${Source_Path}"
node('linux')
{
 stage("Copy Folder")
{
    try
        {
        if (Archival_Path != "" && Source_Path != "")
        {
def log = "$Source_Path"
def folderName = log.substring(log.lastIndexOf("/") + 1, log.length())
def srcShortPath = log.substring(0, log.lastIndexOf("/"))
println "$folderName - $srcShortPath"
  def jenkins = Jenkins.instance
  def target = jenkins.getItemByFullName(Archival_Path)
  def source = jenkins.getItemByFullName(Source_Path)
  def directory =  jenkins.getItemByFullName(srcShortPath)
  directory.each{
    println("$it.name - $it.fullName")
    @NonCPS
    result=it.copy(source,"${BUILD_ID}")
    Items.move(source,target)
    result.renameTo("$folderName")
    def jobs =  jenkins.getItemByFullName(Source_Path).getAllJobs()
    jobs.each {
      it.save()
       
     }
  }
        }else
        {
            println "In-Sufficient Input"
        }
        }
        catch (Exception e)
        {
            println "Error at copy all jobs $e"
        }
        
  }
  }
  
  
  --copy specified job
  import com.cloudbees.hudson.plugins.folder.*
Archival_Path="${Archival_Path}"
Source_Path="${Source_Path}"
Job_Name="${Job_Name}"
node('linux')
{
    stage('Copy and Reset Job')
    {
        try
        {
        if (Archival_Path != "" && Source_Path != "" && Job_Name != "")
        {
      
def log = "$Source_Path"
def jenkins = Jenkins.instance
def folderName = log.substring(log.lastIndexOf("/") + 1, log.length())
def Archival_Full_Path=Archival_Path+"/"+folderName
def Source_Full_Path=Source_Path+"/"+Job_Name
def Source_Directory =  jenkins.getItemByFullName(Source_Full_Path)
 println ("$Archival_Full_Path = Target path to copy the jobs")
  def target = jenkins.getItemByFullName(Archival_Path)
  def source = jenkins.getItemByFullName(Source_Path)
  source.each{ job ->
    println("$job.name - $job.fullName")
    @NonCPS
    temp_copy=job.copy(Source_Directory,"${BUILD_ID}") 
    target.each{ dest ->
   @NonCPS
   result=dest.createProject(Folder.class, folderName)
  Items.move(Source_Directory,result)
      temp_copy.renameTo("$Job_Name")
      temp_copy.save()
      println "Copy job is success"
  }  
      
  }
        } 
        else
        {
            println "In-sufficient input"
        }
        }
  catch(Exception e)
  {
      println "error at copy $e"
  }
}
    
}

--Disable Job
Archival_Path="${Archival_Path}"
Job_Name="${Job_Name}"
Archival_Path_folder=""
node('linux')
{
    stage('Disable')
    {
        try{
        if (Archival_Path != "")
        {
            
    if(Job_Name==null) 
{
 Archival_Path_folder=Archival_Path
}	
else
{
Archival_Path_folder=Archival_Path+"/"+Job_Name
}
     def jenkins = Jenkins.instance
     def jobs =  jenkins.getItemByFullName(Archival_Path_folder).getAllJobs()
     println("$jobs.name = $jobs.fullName")
     jobs.each {
   println "${it.name} is disabled"
  it.setDisabled(true)
  }
  println "Disable job is success"
}
else
{
    println "In-Sufficienct Input"
}
}
catch (Exception e)
{
    println "Error at disble Jobs $e"
}
  }
}



--Rename Folder
Archival_Path="${Archival_Path}"
node('linux')
{
stage('Rename Folder') {
    try
        {
        if (Archival_Path != "")
        {
    def rename = sh (
        script: 'date +%F-%H:%M',
        returnStdout: true
        ).trim()
    def log = "$Archival_Path"
    def folderName = log.substring(log.lastIndexOf("/") + 1, log.length())
    println "$folderName"
	println "Rename Folder ${folderName} - ${rename}"
    def jenkins = Jenkins.instance
    def folder = jenkins.getItemByFullName(Archival_Path)
    if (folder == null) {
      println "ERROR: Folder '$Archival_Path' not found"
    }
    else {
        println "Folder found $folder"
    jenkins.getAllItems().findAll { it.fullName == "${Archival_Path}" }.each { folder1 ->
    println("$folder1.fullName")
    if (folder1.fullName == "$Archival_Path") {
            println "Rename the folder from '$folder1.name' to '$folderName-$rename'"
            folder1.renameTo(folderName+"-"+rename)
            }
        }
		}
		println "Rename Folder Job is success"
        }
        else
        {
            println ("In-sufficient Input")
        }
        }
        catch (Exception e)
        {
            println "Error at rename folder $e"
        }
}
}

--Reset job

Source_Path="${Source_Path}"
Job_Name="${Job_Name}"
buildRange = "1-5000"
node('linux')
{
stage('Reset Build Version')
  {
  try
  {
      if(Source_Path != "" && Job_Name != "")
      {
 def FullPath =  Source_Path+"/"+Job_Name
 println "Target job to reset build number : $FullPath"
 def j = jenkins.model.Jenkins.instance.getItemByFullName(FullPath);
def r = hudson.model.Fingerprint.RangeSet.fromString(buildRange, true);
j.getBuilds(r).each { it.delete() }
j.nextBuildNumber=1
j.save()
println "Reset Job is Success"
}
else
{
    println "In-sufficient Input"
}
}
 catch(Exception e)
 {
 println "Error at reset the build couter $e"
 }
 }
}

--master-pipeline
Archival_Path="${Archival_Path}"
Source_Path="${Source_Path}"

node('linux')
{
    if (Archival_Path != "" && Source_Path != "")
    {
def log = "$Source_Path"
       def folderName = log.substring(log.lastIndexOf("/") + 1, log.length())
        println "$folderName"
       def Archival_Path_folder=Archival_Path+"/"+folderName
       println ("$Archival_Path_folder = Target Path to copy job with build history")
stage("Copy and Reset ALL Job")
{
   
        build job: 'Copy-Reset-All-Jobs', 
        parameters: [[$class: 'StringParameterValue', name: 'Archival_Path', value: Archival_Path],
					[$class:  'StringParameterValue', name: 'Source_Path', value: Source_Path]];
}
stage("Disable Job")
{     
       
        build job: 'Disable-Job', 
      parameters: [[$class: 'StringParameterValue', name: 'Archival_Path', value: Archival_Path_folder]];
							
}
stage("Rename Folder")
{
    
        build job: 'Rename-Folder', 
      parameters: [[$class: 'StringParameterValue', name: 'Archival_Path', value: Archival_Path_folder]];
							
}
}
else
{
    println "In-sufficient Input"
}
}
